<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Product;
use Doctrine\ORM\Query\Expr;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    private $total;
    private $oppositeStorage = 0;
    private $filters = [];

    public function save(Product $product)
    {
        $this->_em->persist($product);
        $this->_em->flush();
    }

    public function countAllProducts()
    {
        return $this->total;
    }

    /*public function setOppositeStorage(int $storageId)
    {
    $this->oppositeStorage = $storageId;

    return $this;
    }*/

    public function addFilter($name, $value)
    {
        $this->filters[$name] = $value;
    }

    /*public function findOneByCountryCode(int $productId, string $countryCode)
    {
    return $this->createQueryBuilder('p')
    ->leftJoin('p.languages', 'pl')
    ->where('p.id = :productId')
    ->andWhere('pl.langCode = :countryCode')
    ->setParameter('productId', $productId)
    ->setParameter('countryCode', $countryCode)
    ->getQuery()
    ->getResult();
    }

    public function findByCountryCode(string $countryCode)
    {
    return $this->createQueryBuilder('p')
    ->leftJoin('p.languages', 'pl')
    ->andWhere('pl.langCode = :countryCode')
    ->setParameter('countryCode', $countryCode)
    ->getQuery()
    ->getResult();
    }*/

    public function update(Product $product)
    {
        $this->_em->merge($product);
        $this->_em->flush();
    }

    public function remove(Product $product)
    {
        $this->_em->remove($product);
        $this->_em->flush();
    }

    public function search(string $langCode, int $limit, int $offset, $orderBy, $orderDir)
    {
        $q = $this->createQueryBuilder('p')
            ->leftJoin('p.languages', 'pl', Expr\Join::WITH, 'pl.langCode = :langCode')
            ->setParameter('langCode', $langCode);

        $this->filters($q);

        $query = $q->getQuery()->getResult();

        $this->total = $q->select('COUNT(p.id)')
            ->getQuery()
            ->getSingleScalarResult();

        return $q->select('p')
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->orderBy($orderBy, $orderDir)
            ->getQuery()->getResult();
    }

    private function filters($q)
    {
        foreach ($this->filters as $key => $value) {
            $methidName = 'add' . ucfirst($key) . 'Filter';
            if (!method_exists($this, $methidName)) {
                continue;
            }
            call_user_func([$this, $methidName], $q, $value);
        }
    }

    private function addWordFilter($q, string $word)
    {
        $q->andWhere('pl.name LIKE :word')
            ->orWhere('p.sku LIKE :word')
            ->orWhere('p.ean LIKE :word')
            ->setParameter('word', '%' . $word . '%');
    }

    private function addOppositeStorageFilter($q, int $storageId)
    {
        $qb = $this->_em->createQueryBuilder();

        $storages = $qb->select('sq')
            ->from('AppBundle\Entity\StorageQuantity', 'sq')
            ->andWhere($qb->expr()->eq('sq.id', $storageId))
            ->getQuery();
        $q->andWhere($q->expr()->notIn('p.id', $storages->getDQL()));
    }

    private function addStorageFilter($q, int $storageId)
    {
        $qb = $this->_em->createQueryBuilder();

        $storages = $qb->select('sq')
            ->from('AppBundle\Entity\StorageQuantity', 'sq')
            ->andWhere($qb->expr()->eq('sq.id', $storageId))
            ->getQuery();
        $q->andWhere($q->expr()->in('p.id', $storages->getDQL()));
    }
}
