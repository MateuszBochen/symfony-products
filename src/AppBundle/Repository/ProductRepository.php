<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Product;
use Doctrine\ORM\Query\Expr;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    private $total;
    private $oppositeStorage = 0;
    private $filters = [];

    public function save(Product $product)
    {
        $this->_em->persist($product);
        $this->_em->flush();
    }

    public function countAllProducts()
    {
        return $this->total;
    }

    /*public function setOppositeStorage(int $storageId)
    {
    $this->oppositeStorage = $storageId;

    return $this;
    }*/

    public function addFilter($name, $value)
    {
        $this->filters[$name] = $value;
    }

    /*public function findOneByCountryCode(int $productId, string $countryCode)
    {
    return $this->createQueryBuilder('p')
    ->leftJoin('p.languages', 'pl')
    ->where('p.id = :productId')
    ->andWhere('pl.langCode = :countryCode')
    ->setParameter('productId', $productId)
    ->setParameter('countryCode', $countryCode)
    ->getQuery()
    ->getResult();
    }

    public function findByCountryCode(string $countryCode)
    {
    return $this->createQueryBuilder('p')
    ->leftJoin('p.languages', 'pl')
    ->andWhere('pl.langCode = :countryCode')
    ->setParameter('countryCode', $countryCode)
    ->getQuery()
    ->getResult();
    }*/

    public function update(Product $product)
    {
        $this->_em->merge($product);
        $this->_em->flush();
    }

    public function remove(Product $product)
    {
        $this->_em->remove($product);
        $this->_em->flush();
    }

    public function search(string $langCode, int $limit, int $offset, $orderBy, $orderDir)
    {
        $q = $this->createQueryBuilder('p')
            ->leftJoin('p.languages', 'pl', Expr\Join::WITH, 'pl.langCode = :langCode')
            ->setParameter('langCode', $langCode);

        // sotorage left join is in storagefilter for correct sum count
        if (!isset($this->filters['storage'])) {
            $q->leftJoin('p.storageQuantity', 'ps');
        }

        $this->filters($q);

        $query = $q->getQuery()->getResult();

        $this->total = $q->select('COUNT(p.id)')
            ->getQuery()
            ->getSingleScalarResult();

        $q->select('p, SUM(ps.quantity) as quantity')
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->groupBy('p.id')
            ->addGroupBy('pl.name')
            ->orderBy($orderBy, $orderDir);

        $r = $q->getQuery()->getResult();
        return $this->aggregateToModel($r);
    }

    private function aggregateToModel($array)
    {
        $newArray = [];

        foreach ($array as $item) {
            $model = $item[0];
            $model->setQuantity($item['quantity'] ? $item['quantity'] : 0);
            $newArray[] = $model;
        }
        return $newArray;
    }

    /**
    // per storage
    SELECT p0_.id, sum(s1_.quantity)
    FROM product p0_
    LEFT JOIN product_language p2_ ON p0_.id = p2_.product_id AND (p2_.langCode = 'pl')
    LEFT JOIN storage_quantity s1_ ON p0_.id = s1_.product_id
    GROUP BY p0_.id

    SELECT p0_.id AS id_0, SUM(s1_.quantity) AS sclr_14 FROM product p0_
    LEFT JOIN product_language p2_ ON p0_.id = p2_.product_id AND (p2_.langCode = 'pl')
    LEFT JOIN storage_quantity s1_ ON p0_.id = s1_.product_id
    WHERE p0_.id IN (SELECT s3_.product_id AS sclr_15 FROM storage_quantity s3_ WHERE s3_.storage_id = 6)
    GROUP BY p0_.id, p2_.name
    ORDER BY p2_.name ASC
    LIMIT 10 OFFSET 0

    // all storages for product
    SELECT p0_.id, s1_.product_id, s1_.storage_id, (SELECT SUM(storage_quantity.quantity) FROM storage_quantity WHERE storage_quantity.product_id = p0_.id group by product_id) as qq
    FROM product p0_
    LEFT JOIN product_language p2_ ON p0_.id = p2_.product_id AND (p2_.langCode = 'pl')
    LEFT JOIN storage_quantity s1_ ON p0_.id = s1_.product_id
    WHERE s1_.storage_id IS NOT null
    GROUP BY s1_.product_id
    ORDER BY p2_.name ASC
    LIMIT 10 OFFSET 0
     */

    private function filters($q)
    {
        foreach ($this->filters as $key => $value) {
            $methodName = 'add' . ucfirst($key) . 'Filter';
            if (!method_exists($this, $methodName)) {
                continue;
            }
            call_user_func([$this, $methodName], $q, $value);
        }
    }

    private function addWordFilter($q, string $word)
    {
        $q->andWhere('pl.name LIKE :word')
            ->orWhere('p.sku LIKE :word')
            ->orWhere('p.ean LIKE :word')
            ->setParameter('word', '%' . $word . '%');
    }

    private function addOppositeStorageFilter($q, int $storageId)
    {
        $qb = $this->_em->createQueryBuilder();
        $storages = $qb->select('IDENTITY(sq.product)')
            ->from('AppBundle\Entity\StorageQuantity', 'sq')
            ->andWhere($qb->expr()->eq('sq.storage', $storageId))
            ->getQuery();
        $q->andWhere($q->expr()->notIn('p.id', $storages->getDQL()));
    }

    private function addStorageFilter($q, int $storageId)
    {
        $qb = $this->_em->createQueryBuilder();

        $storages = $qb->select('IDENTITY(sq.product)')
            ->from('AppBundle\Entity\StorageQuantity', 'sq')
            ->andWhere($qb->expr()->eq('sq.storage', $storageId))
            ->getQuery();

        $q->leftJoin('p.storageQuantity', 'ps', Expr\Join::WITH, 'ps.storage = :storageId')
            ->setParameter('storageId', $storageId);
        $q->andWhere($q->expr()->in('p.id', $storages->getDQL()));
    }
}
